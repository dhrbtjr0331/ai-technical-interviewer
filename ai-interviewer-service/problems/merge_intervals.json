{
  "id": "merge_intervals",
  "title": "Merge Intervals",
  "description": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\n\n**Example 1:**\n```\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\nOutput: [[1,6],[8,10],[15,18]]\nExplanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].\n```\n\n**Example 2:**\n```\nInput: intervals = [[1,4],[4,5]]\nOutput: [[1,5]]\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\n```\n\n**Constraints:**\n- 1 <= intervals.length <= 10^4\n- intervals[i].length == 2\n- 0 <= starti <= endi <= 10^4",
  "difficulty": "medium",
  "test_cases": [
    {
      "input_data": {"intervals": [[1,3],[2,6],[8,10],[15,18]]},
      "expected_output": [[1,6],[8,10],[15,18]],
      "description": "Basic merging case",
      "is_hidden": false
    },
    {
      "input_data": {"intervals": [[1,4],[4,5]]},
      "expected_output": [[1,5]],
      "description": "Adjacent intervals",
      "is_hidden": false
    },
    {
      "input_data": {"intervals": [[1,4],[2,3]]},
      "expected_output": [[1,4]],
      "description": "Completely overlapping",
      "is_hidden": false
    },
    {
      "input_data": {"intervals": [[1,4],[0,4]]},
      "expected_output": [[0,4]],
      "description": "Unsorted input",
      "is_hidden": true
    },
    {
      "input_data": {"intervals": [[1,4],[0,0],[3,5]]},
      "expected_output": [[0,0],[1,5]],
      "description": "Point interval",
      "is_hidden": true
    }
  ],
  "starter_code": "def merge(intervals):\n    \"\"\"\n    :type intervals: List[List[int]]\n    :rtype: List[List[int]]\n    \"\"\"\n    # Your solution here\n    pass",
  "hints": [
    "Try sorting the intervals first by their start time",
    "Iterate through sorted intervals and check for overlaps",
    "Two intervals overlap if start of one is <= end of another"
  ],
  "topics": ["Array", "Sorting"],
  "time_limit_seconds": 1200
}